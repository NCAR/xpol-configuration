/**********************************************************************
 * TDRP params for SunCal2Symprod
 **********************************************************************/

//======================================================================
//
// DEBUGGING.
//
//======================================================================
 
///////////// debug ///////////////////////////////////
//
// Debug option.
// If set, debug messages will be printed appropriately.
//
// Type: enum
// Options:
//     DEBUG_OFF
//     DEBUG_NORM
//     DEBUG_VERBOSE
//

debug = DEBUG_OFF;

//======================================================================
//
// PROCESS CONTROL.
//
//======================================================================
 
///////////// instance ////////////////////////////////
//
// Process instance.
// Used for procmap registration and auto restarting.
// Type: string
//

instance = "";

///////////// no_threads //////////////////////////////
//
// Option to prevent server from using a thread per client.
// For debugging purposes it it sometimes useful to suppress the use of 
//   threads. Set no_threads to TRUE for this type of debugging.
// Type: boolean
//

no_threads = FALSE;

//======================================================================
//
// SERVER MANAGER.
//
//======================================================================
 
///////////// port ////////////////////////////////////
//
// Port number.
// The server listens on this port for client requests.
// Type: int
//

port = 5487;

///////////// qmax ////////////////////////////////////
//
// Max quiescent period (secs).
// If the server does not receive requests for this time period, it will 
//   die gracefully. If set to -1, the server never exits.
// Type: int
//

qmax = -1;

///////////// max_clients /////////////////////////////
//
// Maximum number of clients.
// This is the maximum number of threads the application will produce to 
//   handle client requests.  If the maximum is reached, new clients will 
//   receive a SERVICE_DENIED error message and will have to request the 
//   data again.  If set to -1, no maximum is enforced.
// Type: int
//

max_clients = 64;

//======================================================================
//
// PLOT CENTROID LOCATION LINES.
//
//======================================================================
 
///////////// plot_centroid_location //////////////////
//
// Plot lines to indicate sun centroid location.
// Type: boolean
//

plot_centroid_location = TRUE;

///////////// centroid_line_color /////////////////////
//
// Color for centroid location lines.
// Type: string
//

centroid_line_color = "white";

///////////// centroid_line_width /////////////////////
//
// Width for centroid location lines.
// Type: int
//

centroid_line_width = 2;

//======================================================================
//
// PLOT SUN CIRCLE.
//
//======================================================================
 
///////////// plot_sun_circles ////////////////////////
//
// Plot circles centered on sun centroid.
// Type: boolean
//

plot_sun_circles = TRUE;

///////////// sun_circle_color ////////////////////////
//
// Color for sun circle.
// Type: string
//

sun_circle_color = "white";

///////////// sun_circle_line_width ///////////////////
//
// Width for sun circle line.
// Type: int
//

sun_circle_line_width = 1;

///////////// sun_circle_diameter_deg /////////////////
//
// Diameter of sun circle (deg).
// This is an array - one circle is plotted per entry.
// Type: double
// 1D array - variable length.
//

sun_circle_diameter_deg = { 1, 1.4, 2, 0 };

//======================================================================
//
// PLOT CENTROID TEXT.
//
//======================================================================
 
///////////// plot_centroid_text //////////////////////
//
// Plot text for centroid location?.
// Type: boolean
//

plot_centroid_text = TRUE;

///////////// centroid_text_color /////////////////////
//
// Color of text for centroid location.
// Type: string
//

centroid_text_color = "white";

///////////// centroid_text_background_color //////////
//
// Centroid text background color.
// Set to blank string (the default) to plot the text with no 
//   background. Set to a color name to add a background color.
// Type: string
//

centroid_text_background_color = "";

///////////// centroid_text_horizontal_offset /////////
//
// Horizontal offset, pixels.
// Option to move text to either side of the centroid. If this is 
//   negative the text moves to the left rather than the right.
// Type: int
//

centroid_text_horizontal_offset = 10;

///////////// centroid_text_vertical_offset ///////////
//
// Vertical offset, pixels.
// Option to move text to either above or below the centroid. If this is 
//   negative the text is below, positive is above.
// Type: int
//

centroid_text_vertical_offset = 20;

///////////// centroid_text_line_spacing //////////////
//
// Vertical line spacing, pixels.
// Optionally, the user may choose to plot various parameters (storm 
//   speed, simple and complex track number, trend etc). The selected 
//   poltting elements are then draw vertically above each other on the 
//   display, separated by plot_text_line_offset pixels in the vertical. 
//   If this is negative then the column of numbers will ascend rather 
//   than descend on the display. Does not apply to XML data.
// Type: int
//

centroid_text_line_spacing = 16;

///////////// centroid_text_font //////////////////////
//
// text font name.
// The name of the X font to be used when rendering the text.
// Type: string
//

centroid_text_font = "8x13";

///////////// centroid_text_font_size /////////////////
//
// text font size.
// The size of the font to be used when rendering the text.
// Type: int
//

centroid_text_font_size = 12;

///////////// plot_spol_thumbwheel_guidance ///////////
//
// Include guidance on how to correct the SPOL thumbwheels.
// Type: boolean
//

plot_spol_thumbwheel_guidance = FALSE;

